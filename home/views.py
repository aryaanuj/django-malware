from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.forms import AuthenticationForm 
from django.contrib.auth import views as auth_views
from django.contrib import messages
from Core.models import User
from home import API_KEY
from api.models import *
import requests
from django.http import HttpResponse
from django.views.generic import View
 
#importing get_template from loader
from django.template.loader import get_template
 
#import render_to_pdf from util.py 
from .utils import render_to_pdf 
from api.models import AnalyzedData

class GeneratePdf(View):
     def get(self, request, *args, **kwargs):
        data = AnalyzedData.objects.filter(id=self.kwargs['hash'])
        pdf = render_to_pdf('registration/index.html', {"datas":data})
        return HttpResponse(pdf, content_type='application/pdf')

def MyLoginView(request):
    BASE_URL =  "{0}://{1}{2}".format(request.scheme, request.get_host(), '/api/')
    if request.method == "POST":
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            email = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(email=email, password=password)
            if user is not None:
                login(request, user)
                url = BASE_URL+"getapitoken/"
                payload = "email="+email+"&password="+password
                headers = {
                    'content-type': "application/x-www-form-urlencoded",
                    'cache-control': "no-cache",
                }
                response = requests.request("POST", url, data=payload, headers=headers)
                if response is not None:
                    request.session['API_TOKEN'] = response.json()['access']
                else:
                     messages.error(request,"Invalid email or password1.")
                     return redirect('/login')

                messages.info(request, f"You are now logged in as {email}.")
                return redirect("/")
            else:
               messages.error(request,"Invalid email or password2.")
        else:
            messages.error(request,"Invalid email or password3.")

    
    topsubmissions = AnalyzedData.objects.order_by("-created_at")[:10]
    server_count = Server.objects.count()
    submission_count = AnalyzedData.objects.count()
    malicious_count = AnalyzedData.objects.filter(scan_result='malware').count()
    user_count = User.objects.filter(is_superuser=0).count()
    form = AuthenticationForm()
    context={
        "topsubmissions":topsubmissions,
        "server_count":server_count,
        "submission_count":submission_count,
        "user_count":user_count,
        "malicious_count":malicious_count,
        "login_form":form
    }

    return render(request, 'registration/login.html',context)


def index(request):
    if request.session.get('API_TOKEN') is not None:
        BASE_URL =  "{0}://{1}{2}".format(request.scheme, request.get_host(), '/api/')
        my_headers = {"Authorization" : "Bearer "+request.session.get('API_TOKEN')}
        analyzed_data = requests.get(BASE_URL+'analyzed_data/?ordering=-created_at&limit=7&user='+str(request.user.id), headers=my_headers)
        topsubmissions = requests.get(BASE_URL+'analyzed_data/?limit=10&ordering=-created_at', headers=my_headers)
        context = {
            "analyzed_data":analyzed_data.json(), 
            "topsubmissions":topsubmissions.json(),
            "BASE_URL":BASE_URL
        }
        return render(request, 'home/index.html',context)
    return render(request, 'home/index.html')

def profile(request):
    return render(request, 'home/profile.html')


def mysubmission(request):
    BASE_URL =  "{0}://{1}{2}".format(request.scheme, request.get_host(), '/api/')
    my_headers = {"Authorization" : "Bearer "+request.session.get('API_TOKEN')}
    analyzed_data = requests.get(BASE_URL+'analyzed_data/?ordering=-created_at&user='+str(request.user.id), headers=my_headers)
    context = {
        "analyzed_data":analyzed_data.json(), 
        "BASE_URL":BASE_URL
    }
    return render(request, 'home/mysubmission.html',context)

def report(request,report_hash):
    BASE_URL =  "{0}://{1}{2}".format(request.scheme, request.get_host(), '/api/')
    return render(request, 'home/report.html', {"report_hash":report_hash, "BASE_URL":BASE_URL})

def register(request):
    return render(request, 'home/register.html')

def logout_view(request):
    try:
        del request.session['API_TOKEN']
    except KeyError:
        pass
    logout(request)
    return redirect('login')

def handler404(request, exception):
    return render('home/error_404.html')

# def handler500(request, exception):
    # return render('home/error_500.html')