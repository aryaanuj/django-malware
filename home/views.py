from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.forms import AuthenticationForm 
from django.contrib.auth import views as auth_views
from django.contrib import messages
from Core.models import User
from home import API_KEY
from api.models import *
import requests
from django.http import HttpResponse
from django.views.generic import View
from .forms import RegistrationForm
 
#importing get_template from loader
from django.template.loader import get_template
from django.template import loader
#import render_to_pdf from util.py 
from .utils import render_to_pdf 
from api.models import AnalysisResults
import pdfkit
import mimetypes
# import os module
import os

def GeneratePdf(request, hash):
    path_wkhtmltopdf = r'C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe'
    config = pdfkit.configuration(wkhtmltopdf=path_wkhtmltopdf)
    pdf = pdfkit.from_url("http://127.0.0.1:8000/pdfview/"+hash, hash+".pdf", configuration=config)
      # Define Django project base directory
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    # Define text file name
    filename = hash+'.pdf'
    # Define the full file path
    filepath = BASE_DIR +'\\'+ filename
    try:
        # Open the file for reading content
        path = open(filepath, 'rb')
        # Set the return value of the HttpResponse
        response = HttpResponse(path, content_type="application/pdf")
        # Set the HTTP header for sending to browser
        response['Content-Disposition'] = "attachment; filename=%s" % filename
        # Return the response value
        return response
    except:
         return redirect('/')


def PdfView(request, hash):
    data = AnalysisResults.objects.filter(uuid=hash)
    return render(request, 'registration/index.html', {'datas':data, 'structural':data[0].structural_info, 'hash':hash})

def MyLoginView(request):
    BASE_URL =  "{0}://{1}{2}".format(request.scheme, request.get_host(), '/api/')
    if request.method == "POST":
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            email = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(email=email, password=password)
            if user is not None:
                login(request, user)
                url = BASE_URL+"getapitoken/"
                payload = "email="+email+"&password="+password
                headers = {
                    'content-type': "application/x-www-form-urlencoded",
                    'cache-control': "no-cache",
                }
                response = requests.request("POST", url, data=payload, headers=headers)
                if response is not None:
                    request.session['API_TOKEN'] = response.json()['access']
                else:
                     messages.error(request,"Invalid email or password.")
                     return redirect('/login')

                messages.info(request, f"You are now logged in as {email}.")
                return redirect("/")
            else:
               messages.error(request,"Invalid email or password.")
        else:
            messages.error(request,"Invalid email or password.")

    
    topsubmissions = AnalysisResults.objects.order_by("-created_at")[:10]
    server_count = Server.objects.count()
    submission_count = AnalysisResults.objects.count()
    malicious_count = AnalysisResults.objects.filter(scan_result='malware').count()
    user_count = User.objects.filter(is_superuser=0).count()
    form = AuthenticationForm()
    context={
        "topsubmissions":topsubmissions,
        "server_count":server_count,
        "submission_count":submission_count,
        "user_count":user_count,
        "malicious_count":malicious_count,
        "login_form":form
    }

    return render(request, 'registration/login.html',context)


def index(request):
    if request.session.get('API_TOKEN') is not None:
        BASE_URL =  "{0}://{1}{2}".format(request.scheme, request.get_host(), '/api/')
        analyzed_data = AnalysisResults.objects.filter(user=request.user.id).order_by("-created_at")[0:6]
        topsubmissions = AnalysisResults.objects.order_by("-created_at")[:9]
        context = {
            "analyzed_data":analyzed_data, 
            "topsubmissions":topsubmissions,
            "BASE_URL":BASE_URL
        }
        
        return render(request, 'home/index.html',context)
    return render(request, 'home/index.html')

def profile(request):
    return render(request, 'home/profile.html')


def mysubmission(request):
    BASE_URL =  "{0}://{1}{2}".format(request.scheme, request.get_host(), '/api/')
    analyzed_data = AnalysisResults.objects.filter(user=request.user.id)
    context = {
        "analyzed_data":analyzed_data, 
        "BASE_URL":BASE_URL
    }
    return render(request, 'home/mysubmission.html',context)

def report(request,report_hash):
    if not request.user.is_authenticated:
        return redirect('login')
        
    BASE_URL =  "{0}://{1}{2}".format(request.scheme, request.get_host(), '/api/')
    return render(request, 'home/report.html', {"report_hash":report_hash, "BASE_URL":BASE_URL})

def register(request):
    if request.method == "POST":
        if request.POST.get('password') != request.POST.get('confirm_pass'):
            messages.error(request,"Password not Matched!!")
            return redirect('/register')
        mobile = str(request.POST.get('mobile'))
        if len(mobile)<10 or len(mobile)>10:
            messages.error(request,"Invalid Mobile Number")
            return redirect('/register')   

        form = RegistrationForm(request.POST)  
        if form.is_valid():  
            try:  
                user = form.save(commit = False)
                user.save()
                messages.success(request,"Your Request has been sent successfully")
                return redirect('/register')
            except:  
                messages.error(request,"Something Went Wrong. Please try again")
                return redirect('/register')
       
    return render(request, 'home/register.html', {"form":RegistrationForm()})

def logout_view(request):
    try:
        del request.session['API_TOKEN']
    except KeyError:
        pass
    logout(request)
    return redirect('login')

def handler404(request, exception):
    return render('home/error_404.html')

# def handler500(request, exception):
    # return render('home/error_500.html')