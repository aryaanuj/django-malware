from django.shortcuts import render, HttpResponse
from rest_framework.filters import SearchFilter, OrderingFilter
from django_filters.rest_framework import DjangoFilterBackend
from .customlimitoffset import customlimitoffset
from .models import Server, AnalyzedData, AnalyzedFieldView, AnalysisResults
from .serializers import *
from rest_framework import viewsets
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.response import Response
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from rest_framework.generics import CreateAPIView
from Core.models import User
from rest_framework.generics import CreateAPIView, RetrieveUpdateDestroyAPIView, ListAPIView


class IsSuperUser(IsAdminUser):
    def has_permission(self, request, view):
        return bool(request.user and request.user.is_superuser)

@method_decorator(csrf_exempt, name='dispatch')
class ServerViewSet(viewsets.ModelViewSet):
	queryset = Server.objects.all()
	serializer_class = ServerSerializer
	permission_classes = [IsSuperUser]
	def update(self, request, *args, **kwargs):
		kwargs['partial'] = True
		return super().update(request, *args, **kwargs)

# @method_decorator(csrf_exempt, name='dispatch')
# class AnalyzedFieldViewViewSet(viewsets.ModelViewSet):
# 	queryset = AnalyzedFieldView.objects.all()
# 	serializer_class = AnalyzedFieldViewSerializer
# 	# authentication_classes = [JWTAuthentication]
# 	# permission_classes = [IsAuthenticated]
# 	filterset_fields = ['filetype']
# 	def update(self, request, *args, **kwargs):
# 		kwargs['partial'] = True
# 		return super().update(request, *args, **kwargs)

# @method_decorator(csrf_exempt, name='dispatch')
# class AnalyzedDataViewSet(viewsets.ModelViewSet):
# 	parser_classes = [MultiPartParser,FormParser]
# 	queryset = AnalysisResults.objects.all()
# 	serializer_class = AnalyzedDataSerializer
# 	authentication_classes = [JWTAuthentication]
# 	permission_classes = [IsAuthenticated]
# 	filter_backends = [SearchFilter, OrderingFilter,DjangoFilterBackend]
# 	search_fields = ['^filename', '^md5', '^sha1', '^sha256']
# 	filterset_fields = ['id', 'user', 'status']
# 	ordering_fields = ['id','filename','md5','sha1','sha256', 'created_at']
# 	pagination_class = customlimitoffset
# 	def update(self, request, *args, **kwargs):
# 		kwargs['partial'] = True
# 		return super().update(request, *args, **kwargs)
# 	def post(self, request, *args, **kwargs):
# 		analyzeSerializer = AnalyzedDataSerializer(data=request.data)
# 		if analyzeSerializer.is_valid():
# 			analyzeSerializer.save()
# 			return Response(analyzeSerializer.data, status=status.HTTP_201_CREATED)
# 		else:
# 			return Response(analyzeSerializer.errors, status=status.HTTP_400_BAD_REQUEST)





@method_decorator(csrf_exempt, name='dispatch')
class AnalyzeCreate(CreateAPIView):
	parser_classes = [MultiPartParser,FormParser]
	queryset = AnalysisResults.objects.all()
	serializer_class = AnalyzedDataSerializer
	authentication_classes = [JWTAuthentication]
	permission_classes = [IsAuthenticated]
	filter_backends = [SearchFilter, OrderingFilter,DjangoFilterBackend]
	search_fields = ['^filename', '^md5', '^sha1', '^sha256']
	filterset_fields = ['id', 'user', 'status']
	ordering_fields = ['id','filename','md5','sha1','sha256', 'created_at']
	pagination_class = customlimitoffset

@method_decorator(csrf_exempt, name='dispatch')
class AnalyzeListApi(ListAPIView):
	parser_classes = [MultiPartParser,FormParser]
	serializer_class = AnalyzedDataSerializer
	queryset = AnalysisResults.objects.all()
	authentication_classes = [JWTAuthentication]
	permission_classes = [IsAuthenticated]
	filter_backends = [SearchFilter, OrderingFilter,DjangoFilterBackend]
	search_fields = ['^filename','^uuid', '^md5', '^sha1', '^sha256']
	filterset_fields = ['id','uuid', 'user', 'status']
	ordering_fields = ['id','filename','md5','sha1','sha256', 'created_at']
	pagination_class = customlimitoffset
	def get_queryset(self, *args, **kwargs):
		return AnalysisResults.objects.filter(user=self.request.user.id)

@method_decorator(csrf_exempt, name='dispatch')
class AnalyzeApi(RetrieveUpdateDestroyAPIView):
	parser_classes = [MultiPartParser,FormParser]
	queryset = AnalysisResults.objects.all()
	serializer_class = AnalyzedDataSerializer
	permission_classes = [IsSuperUser]
	filter_backends = [SearchFilter, OrderingFilter,DjangoFilterBackend]
	search_fields = ['^filename', '^md5', '^sha1', '^sha256']
	filterset_fields = ['id', 'uuid', 'user', 'status']
	ordering_fields = ['id','filename','md5','sha1','sha256', 'created_at']
	pagination_class = customlimitoffset
