from django.shortcuts import render, HttpResponse
from rest_framework.filters import SearchFilter, OrderingFilter
from .customlimitoffset import customlimitoffset
from .models import Server, AnalyzedData
from .serializers import ServerSerializer, AnalyzedDataSerializer
from rest_framework import viewsets
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.response import Response
# class ServerModel(ListAPIView):
# 	queryset = Server.objects.all()
# 	serializer_class = ServerSerializer

class AnalyzedDataViewSet(viewsets.ModelViewSet):
	parser_classes = [MultiPartParser,FormParser]
	queryset = AnalyzedData.objects.all()
	serializer_class = AnalyzedDataSerializer
	filter_backends = [SearchFilter, OrderingFilter]
	search_fields = ['^filename', '^md5', '^sha1', '^sha256']
	ordering_fields = ['id','filename','md5','sha1','sha256']
	pagination_class = customlimitoffset
	def update(self, request, *args, **kwargs):
		kwargs['partial'] = True
		return super().update(request, *args, **kwargs)
	def post(self, request, *args, **kwargs):
		analyzeSerializer = AnalyzedDataSerializer(data=request.data)
		if analyzeSerializer.is_valid():
			analyzeSerializer.save()
			return Response(analyzeSerializer.data, status=status.HTTP_201_CREATED)
		else:
			return Response(analyzeSerializer.errors, status=status.HTTP_400_BAD_REQUEST)


