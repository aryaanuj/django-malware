from django.db import models
from Core.models import User
import uuid

# server model
class Server(models.Model):
	server_name = models.CharField(max_length=200)
	status = models.BooleanField(default=False)


# AnalyzedData
class AnalyzedData(models.Model):
	PENDING='pending'
	COMPLETE = 'complete'
	STATUS_CHOICES = (
		(PENDING, 'pending'),
		(COMPLETE, 'complete')
	)
	id = models.UUIDField(default=uuid.uuid4, primary_key=True, editable=False)
	user  = models.ForeignKey(User,on_delete=models.CASCADE, db_index=True)
	filename = models.CharField(max_length=255, db_index=True)
	fileurl  = models.FileField(blank=False, null=False)
	filesize = models.CharField(max_length=20, null=True)
	filetype = models.CharField(max_length=255, null=True)
	md5		 = models.CharField(max_length=255, db_index=True, null=True)
	sha1	 = models.CharField(max_length=255, null=True)
	sha256	 = models.CharField(max_length=255, null=True)
	ssdeep	 = models.CharField(max_length=255, null=True)
	magic	 = models.CharField(max_length=255, null=True)
	scan_result = models.CharField(max_length=255, null=True)
	malware_type = models.CharField(max_length=100, null=True)
	debugsize = models.IntegerField(null=True)
	dll		 = models.IntegerField(null=True)
	exportsize = models.IntegerField(null=True)
	imageversion = models.IntegerField(null=True)
	importfunctioncount = models.IntegerField(null=True)
	importfunctionmethodcount = models.IntegerField(null=True)
	linkerversion = models.IntegerField(null=True)
	numberofsections = models.IntegerField(null=True)
	osversion = models.IntegerField(null=True)
	dll_loaded = models.IntegerField(null=True)
	file_opened = models.IntegerField(null=True)
	regkey_written = models.IntegerField(null=True)
	regkey_read = models.IntegerField(null=True)
	regkey_opened = models.IntegerField(null=True)
	file_written = models.IntegerField(null=True)
	file_read = models.IntegerField(null=True)
	file_copied = models.IntegerField(null=True)
	regkey_deleted = models.IntegerField(null=True)
	directory_enumerated = models.IntegerField(null=True)
	version = models.IntegerField(null=True)
	machine = models.CharField(max_length=100,null=True)
	entry_point_address = models.CharField(max_length=100, null=True)
	size_of_header = models.IntegerField(null=True)
	size_of_program_header = models.IntegerField(null=True)
	number_of_program_header = models.IntegerField(null=True)
	size_of_section_header = models.IntegerField(null=True)
	number_of_section_header = models.IntegerField(null=True)
	number_of_page = models.IntegerField(null=True)
	encrypt = models.IntegerField(null=True)
	number_of_object_streams = models.IntegerField(null=True)
	javascript = models.IntegerField(null=True)
	automatic_action = models.IntegerField(null=True)
	open_action = models.IntegerField(null=True)
	acroform = models.IntegerField(null=True)
	embedded_file = models.IntegerField(null=True)
	no_of_intent_category_entries = models.IntegerField(null=True)
	no_of_intent_action_entries = models.IntegerField(null=True)
	no_of_permission_entries = models.IntegerField(null=True)
	no_of_broadcast_reciever_entries = models.IntegerField(null=True)
	no_of_service_entries = models.IntegerField(null=True)
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)
	status = models.CharField(max_length=20,choices=STATUS_CHOICES, db_index=True, default='pending')


# OverviewData
class AnalyzedFieldView(models.Model):
	filename = models.BooleanField(default=True)
	fileurl  = models.BooleanField(default=True)
	filesize = models.BooleanField(default=True)
	filetype = models.CharField(max_length=255, db_index=True)
	md5		 = models.BooleanField(default=True)
	sha1	 = models.BooleanField(default=True)
	sha256	 = models.BooleanField(default=True)
	ssdeep	 = models.BooleanField(default=True)
	magic	 = models.BooleanField(default=True)
	scan_result = models.BooleanField(default=True)
	malware_type = models.BooleanField(default=True)
	debugsize = models.BooleanField(default=True)
	dll		 = models.BooleanField(default=True)
	exportsize = models.BooleanField(default=True)
	imageversion = models.BooleanField(default=True)
	importfunctioncount = models.BooleanField(default=True)
	importfunctionmethodcount = models.BooleanField(default=True)
	linkerversion = models.BooleanField(default=True)
	numberofsections = models.BooleanField(default=True)
	osversion = models.BooleanField(default=True)
	dll_loaded = models.BooleanField(default=True)
	file_opened = models.BooleanField(default=True)
	regkey_written = models.BooleanField(default=True)
	regkey_read = models.BooleanField(default=True)
	regkey_opened = models.BooleanField(default=True)
	file_written = models.BooleanField(default=True)
	file_read = models.BooleanField(default=True)
	file_copied = models.BooleanField(default=True)
	regkey_deleted = models.BooleanField(default=True)
	directory_enumerated = models.BooleanField(default=True)
	version = models.BooleanField(default=True)
	machine = models.BooleanField(default=True)
	entry_point_address = models.BooleanField(default=True)
	size_of_header = models.BooleanField(default=True)
	size_of_program_header = models.BooleanField(default=True)
	number_of_program_header = models.BooleanField(default=True)
	size_of_section_header = models.BooleanField(default=True)
	number_of_section_header = models.BooleanField(default=True)
	number_of_page = models.BooleanField(default=True)
	encrypt = models.BooleanField(default=True)
	number_of_object_streams = models.BooleanField(default=True)
	javascript = models.BooleanField(default=True)
	automatic_action = models.BooleanField(default=True)
	open_action = models.BooleanField(default=True)
	acroform = models.BooleanField(default=True)
	embedded_file = models.BooleanField(default=True)
	no_of_intent_category_entries = models.BooleanField(default=True)
	no_of_intent_action_entries = models.BooleanField(default=True)
	no_of_permission_entries = models.BooleanField(default=True)
	no_of_broadcast_reciever_entries = models.BooleanField(default=True)
	no_of_service_entries = models.BooleanField(default=True)
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)



