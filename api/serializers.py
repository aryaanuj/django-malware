from rest_framework import serializers
from api.models import  Server, AnalyzedData, AnalyzedFieldView
import hashlib


class ServerSerializer(serializers.ModelSerializer):
	class Meta:
		model = Server
		fields = ['id', 'server_name', 'status']

class AnalyzedFieldViewSerializer(serializers.ModelSerializer):
	class Meta:
		model = AnalyzedFieldView
		fields = '__all__'


class AnalyzedDataSerializer(serializers.ModelSerializer):
	def validate(self, attrs):
		if attrs.get('fileurl') is not None:
			file = attrs.get('fileurl')
			# print(file)
			# md5_hash = hashlib.md5()
			# a_file = open(file, "rb")
			# content = a_file.read()
			# print(content)
			# md5_hash.update(content)

			# digest = md5_hash.hexdigest()

			# attrs['filename']  = digest
			# attrs['fileurl'] = digest

			file_size = file.size
			sizeKB = file_size / 1024
			if int(sizeKB) > 1024:
				sizeMB = sizeKB / 1024
				sizeStr = "{:.2f}".format(sizeMB) + " MB"
			else:
				sizeStr = "{:.2f}".format(sizeKB) + " KB"
			attrs['filesize'] = sizeStr
			attrs['filetype'] = file.content_type
			return attrs
		return attrs
	class Meta:
		model = AnalyzedData
		fields = '__all__'
