'use strict';

// loading bar
var Nanobar = function() {
  var c, d, e, f, g, h, k = {
      width: "100%",
      height: "5px",
      zIndex: 9999,
      top: "0"
    },
    l = {
      width: 0,
      height: "100%",
      clear: "both",
      transition: "height .3s"
    };
  c = function(a, b) {
    for (var c in b) a.style[c] = b[c];
    a.style["float"] = "left"
  };
  f = function() {
    var a = this,
      b = this.width - this.here;
    0.1 > b && -0.1 < b ? (g.call(this, this.here), this.moving = !1, 100 == this.width && (this.el.style.height = 0, setTimeout(function() {
      a.cont.el.removeChild(a.el)
    }, 100))) : (g.call(this, this.width - b / 4), setTimeout(function() {
      a.go()
    }, 16))
  };
  g = function(a) {
    this.width =
      a;
    this.el.style.width = this.width + "%"
  };
  h = function() {
    var a = new d(this);
    this.bars.unshift(a)
  };
  d = function(a) {
    this.el = document.createElement("div");
    this.el.style.backgroundColor = a.opts.bg;
    this.here = this.width = 0;
    this.moving = !1;
    this.cont = a;
    c(this.el, l);
    a.el.appendChild(this.el)
  };
  d.prototype.go = function(a) {
    a ? (this.here = a, this.moving || (this.moving = !0, f.call(this))) : this.moving && f.call(this)
  };
  e = function(a) {
    a = this.opts = a || {};
    var b;
    a.bg = a.bg || "red";
    this.bars = [];
    b = this.el = document.createElement("div");
    c(this.el,
      k);
    a.id && (b.id = a.id);
    b.style.position = a.target ? "relative" : "fixed";
    a.target ? a.target.insertBefore(b, a.target.firstChild) : document.getElementsByTagName("body")[0].appendChild(b);
    h.call(this)
  };
  e.prototype.go = function(a) {
    this.bars[0].go(a);
    100 == a && h.call(this)
  };
  return e
}();
var nanobar = new Nanobar();
nanobar.go(30);
nanobar.go(60);
nanobar.go(100);

// full screen
var elem = document.documentElement;

function openFullscreen() {
  const fc_btn = document.getElementById('fullscreen');
  const iconClass = fc_btn.getAttribute('class');
  if (iconClass == "fa fa-expand") {
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
      fc_btn.setAttribute('class', 'fa fa-compress');
    } else if (elem.webkitRequestFullscreen) {
      /* Safari */
      elem.webkitRequestFullscreen();
      fc_btn.setAttribute('class', 'fa fa-compress');
    } else if (elem.msRequestFullscreen) {
      /* IE11 */
      elem.msRequestFullscreen();
      fc_btn.setAttribute('class', 'fa fa-compress');
    }
  } else {
    if (document.exitFullscreen) {
      document.exitFullscreen();
      fc_btn.setAttribute('class', 'fa fa-expand');
    } else if (document.webkitExitFullscreen) {
      /* Safari */
      document.webkitExitFullscreen();
      fc_btn.setAttribute('class', 'fa fa-expand');
    } else if (document.msExitFullscreen) {
      /* IE11 */
      document.msExitFullscreen();
      fc_btn.setAttribute('class', 'fa fa-expand');
    }
  }
}

// form validation
(function() {
  window.addEventListener('load', function() {
    var forms = document.getElementsByClassName('needs-validation');
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();

//password confirmation checking
$(document).ready(function() {
  $("#con_password").keyup(function() {
    var pass = $("#password").val();
    var cnf_pass = $(this).val();
    if (pass != "" && cnf_pass != "") {
      if (pass == cnf_pass) {
        $("#cnf-msg").html("<p class='text-success'>Password Matched</p>");
      } else {
        $("#cnf-msg").html("<p class='text-danger'>Password Not Matched</p>");
      }
    }
  });
  // available server
  // setInterval(function() {
  //   $.ajax({
  //     url: "available_server.php",
  //     method: "post",
  //     success: function(data) {
  //       $("#server").html(data);
  //     }
  //   });
  // }, 1000);

  // end available serve
  //##################### index ###########################

  $("#report_link").click(function() {
    $("#report_link").attr("href", "report_search/" + $("#report_val").val());
  });
  // report search link
  $("#report_val").keyup(function() {
    $("#report_link").attr("href", "report_search/" + $(this).val());
  });

  // datatable
  $("#example").DataTable();

  // tabs
  var tabs = $('.tabs');
  var selector = $('.tabs').find('a').length;
  var activeItem = tabs.find('.active1');
  var activeWidth = activeItem.innerWidth();
  $(".selector").css({
    "left": activeItem.position.left + "px",
    "width": activeWidth + "px"
  });
  $(".tabs").on("click", "a", function(e) {
    e.preventDefault();
    $('.tabs a').removeClass("active1");
    $(this).addClass('active1');
    var activeWidth = $(this).innerWidth();
    var itemPos = $(this).position();
    $(".selector").css({
      "left": itemPos.left + "px",
      "width": activeWidth + "px"
    });
  });
});



// var datas={};
function sendFileToServer(formData, status) {
  var uploadURL = "uploadfile.php"; //Upload URL
  var extraData = {}; //Extra Data.
  var jqXHR = $.ajax({
    xhr: function() {
      var xhrobj = $.ajaxSettings.xhr();
      if (xhrobj.upload) {
        xhrobj.upload.addEventListener('progress', function(event) {
          var percent = 0;
          var position = event.loaded || event.position;
          var total = event.total;
          if (event.lengthComputable) {
            percent = Math.ceil(position / total * 100);
          }
          //Set progress
          status.setProgress(percent);
        }, false);
      }
      return xhrobj;
    },
    url: uploadURL,
    type: "POST",
    contentType: false,
    processData: false,
    cache: false,
    data: formData,
    success: function(data) {
      var obj = JSON.parse(data);
      if (obj.status) {
        status.setProgress(100);
        $("#prog").html("<label>File uploaded successfully</label>");
        $(".statusbar").hide();
        $("#analyzebtn").html("<a href='report_search/" + obj.filename + "' class='btn text-white' style='background-color:#200080'>Analyze <i class='fa fa-arrow-right'></i></a>");
        $("#analyzebtn").attr("disabled", false);
      } else {
        $("#file-upload-modal .modal-title").html("Error");
        $("#file-upload-modal .modal-body").html(obj.msg);
        $("#file-upload-modal .modal-footer").html("");
        $("#file-upload-modal").modal('show');
      }
    }
  });

  status.setAbort(jqXHR);
}


function getfiletype(file) {
  var extension = file.substr((file.lastIndexOf('.') + 1));
  extension = extension.toLowerCase();
  switch (extension) {
    case 'jpg':
    case 'png':
    case 'gif':
    case 'jpeg':
      $("#imagetype").attr('class', 'fa fa-image fa-5x');
      $(".file-type").html(extension);
      break;
    case 'zip':
    case 'rar':
      $("#imagetype").attr('class', 'fa fa-file-archive-o fa-5x');
      $(".file-type").html(extension);
      break;
    case 'pdf':
      $("#imagetype").attr('class', 'fa fa-file-pdf-o fa-5x');
      $(".file-type").html(extension);
      break;
    case 'mp4':
    case 'mpeg':
    case '3gp':
      $("#imagetype").attr('class', 'fa fa-file-video-o fa-5x');
      $(".file-type").html(extension);
      break;
    case 'mp3':
      $("#imagetype").attr('class', 'fa fa-file-audio-o fa-5x');
      $(".file-type").html(extension);
      break;
    case 'xls':
    case 'csv':
      $("#imagetype").attr('class', 'fa fa-file-excel-o fa-5x');
      $(".file-type").html(extension);
      break;
    case 'docx':
      $("#imagetype").attr('class', 'fa fa-file-word-o fa-5x');
      $(".file-type").html(extension);
      break;
    case 'php':
    case 'js':
    case 'html':
    case 'py':
      $("#imagetype").attr('class', 'fa fa-file-code-o fa-5x');
      $(".file-type").html(extension);
      break;
    default:
      $("#imagetype").attr('class', 'fa fa-file-text-o fa-5x');
      $(".file-type").html(extension);
  }
};

function createStatusbar(obj) {
  obj = $("#prog");

  this.statusbar = $("<div id='progbar-cont' class='col-md-12 statusbar'></div>");
  this.progressBar = $("<div class='progressBar progress-bar progress-bar-striped' style='background-color:#200080' role='progressbar' style='width:100%; background-color'><div>").appendTo(this.statusbar);
  this.abort = $("<div class='abort'>Abort</div>").appendTo(this.statusbar);

  obj.after(this.statusbar);


  this.setFileNameSize = function(name, size) {
    var sizeStr = "";
    var sizeKB = size / 1024;
    if (parseInt(sizeKB) > 1024) {
      var sizeMB = sizeKB / 1024;
      sizeStr = sizeMB.toFixed(2) + " MB";
    } else {
      sizeStr = sizeKB.toFixed(2) + " KB";
    }

    getfiletype(name);
    // datas['type'] = name.substr( (name.lastIndexOf('.') +1) );
    // datas['filesize']=sizeStr;
    $(".file-name").html(name);
    $(".file-size").html(sizeStr);

  }
  this.setProgress = function(progress) {
    var progressBarWidth = progress * this.progressBar.width() / 100;
    this.progressBar.find('div').animate({
      width: progressBarWidth
    }, 10).html("<span class='text-center'>" + progress + "% </span>");
    if (parseInt(progress) >= 100) {
      this.abort.hide();
    }
  }
  this.setAbort = function(jqxhr) {
    var sb = this.statusbar;
    this.abort.click(function() {
      jqxhr.abort();
      sb.hide();
    });
  }
}

function handleFileUpload(files, obj) {
  var fd = new FormData();
  var token = $("#file-token").val();
  fd.append('file', files[0]);
  fd.append('token', token);

  var status = new createStatusbar(obj); //Using this we can set progress.
  $(".mime-type").html(files[0].type);
  // datas["mimetype"]=files[0].type;
  // datas['filename']=files[0].name;
  status.setFileNameSize(files[0].name, files[0].size);
  sendFileToServer(fd, status);
}

$(document).ready(function() {
  var obj = $(".dragandrophandler");
  var obs = $("#choosefile");
  obs.on('change', function(e) {
    e.preventDefault();

    var files = this.files;
    $("#file-upload-modal").modal('show');
    //We need to send dropped files to Server
    handleFileUpload(files, obs);
  });
  obj.on('dragenter', function(e) {
    e.stopPropagation();
    e.preventDefault();
    $(this).css('border', '2px solid #f0ad4e');
  });
  obj.on('dragover', function(e) {
    e.stopPropagation();
    e.preventDefault();
  });
  obj.on('drop', function(e) {

    $(this).css('border', '2px dashed #f0ad4e');
    e.preventDefault();
    var files = e.originalEvent.dataTransfer.files;
    $("#file-upload-modal").modal('show');
    //We need to send dropped files to Server
    handleFileUpload(files, obj);
  });

});