# from django.shortcuts import render
from django.http import JsonResponse, HttpResponse
# from django.views.decorators.csrf import csrf_exempt
# import io

from .models import Product
from .serializers import ProductSerializer
# from rest_framework.renderers import JSONRenderer
# from rest_framework.parsers import JSONParser
from rest_framework.decorators import api_view
from rest_framework.response import Response



# Create your views here.
def index(request):
	return HttpResponse("hello")


# api view

@api_view(['GET', 'POST', 'PUT', 'DELETE'])
def product_list(request):
	# get request
	if request.method == 'GET':
		id = request.data.get('id')
		serializer = ''
		if id is not None:
			if Product.objects.filter(pk=id).exists():
				product = Product.objects.get(pk=id)
				serializer = ProductSerializer(product)
			else:
				Response({'status':False, 'error':'data not exists'})
		else:
			product = Product.objects.all()
			serializer = ProductSerializer(product, many=True)
		return Response(serializer.data)
	if request.method == 'POST':
		serializer = ProductSerializer(data=request.data)
		if serializer.is_valid():
			serializer.save()
			return Response({'status':True, 'msg':'data saved'})
		return Response({'status':False, 'error':serializer.errors})

	# post request
	if request.method == 'PUT':
		id = request.data.get('id')
		if id is not None:
			if Product.objects.filter(pk=id).exists():
				product = Product.objects.get(pk=id)
				serializer = ProductSerializer(product, data=request.data, partial=True)
				if serializer.is_valid():
					serializer.save()
					return Response({'status':True, 'msg':'data updated'})
				return Response({'status':False, 'error':serializer.errors})
			else:
				return Response({'status':False, 'error':'data not exists'})
		else:
			return Response({'status':False, 'error':'id not given'})

	# delete request
	if request.method == 'DELETE':
		id = request.data.get('id')
		if id is not None:
			if Product.objects.filter(pk=id).exists():
				product = Product.objects.get(pk=id)
				product.delete()
				return Response({'status':True, 'msg':'data deleted'})
			else:
				return Response({'status':False, 'msg':'data not exists'})
		else:
			return Response({'status':False, 'error':'id not given'})
		






# @csrf_exempt
# def product_list(request):
# 	if request.method=='GET':
# 		# get streams of json data
# 		stream = io.BytesIO(request.body)
# 		# get python native data (dict data)
# 		pythondata = JSONParser().parse(stream)
# 		# get id from pythondata
# 		id = pythondata.get('id', None)
# 		serializer = ''
# 		if id is not None:
# 			# check given id is exists or not
# 			if Product.objects.filter(pk=id).exists():
# 				products = Product.objects.get(pk=id)
# 				# convert into python data (serialization)
# 				serializer = ProductSerializer(products)
# 			else:
# 				# send json data as response
# 				return JsonResponse({'status':False,'error':'data not exists'})
# 		else:
# 			products = Product.objects.all()
# 			serializer = ProductSerializer(products, many=True)
# 		jsondata = JSONRenderer().render(serializer.data)
# 		return HttpResponse(jsondata,content_type="application/json")
# 		# return JsonResponse(serializer.data, safe=False)
# 	if request.method == 'POST':
# 		stream = io.BytesIO(request.body)
# 		pythondata = JSONParser().parse(stream)
# 		# convert pythondata to complex data
# 		serializer = ProductSerializer(data=pythondata)
# 		# check given python data is in valid fashion or not
# 		if serializer.is_valid():
# 			serializer.save()
# 			return JsonResponse({'status':True, 'msg':'data saved'})
# 		return JsonResponse({'status':False,'error':serializer.errors})
# 	if request.method == 'PUT':
# 		stream = io.BytesIO(request.body)
# 		pythondata = JSONParser().parse(stream)
# 		id = pythondata.get('id')
# 		if Product.objects.filter(pk=id).exists():
# 			product = Product.objects.get(pk=id)
# 			serializer = ProductSerializer(product, data=pythondata, partial=True)
# 			if serializer.is_valid():
# 				serializer.save()
# 				return JsonResponse({'status':True, 'msg':'data updated'})
# 			return JsonResponse({'status':False,'error':serializer.errors})
# 		else:
# 			return JsonResponse({'status':False,'error':'data not exists'})
# 	if request.method == 'DELETE':
# 		stream = io.BytesIO(request.body)
# 		pythondata = JSONParser().parse(stream)
# 		id = pythondata.get('id')
# 		if Product.objects.filter(pk=id).exists():
# 			product = Product.objects.get(pk=id)
# 			product.delete()
# 			return JsonResponse({'status':True, 'msg':'data deleted'})
# 		else:
# 			return JsonResponse({'status':False, 'msg':'data not exists'})
		



# def product_item(request, id):
# 	product = Product.objects.get(id=id)
# 	serializer = ProductSerializer(product)
# 	# jsondata = JSONRenderer().render(serializer.data)
# 	# return HttpResponse(jsondata, content_type="application/json")
# 	return JsonResponse(serializer.data)

# @csrf_exempt
# def addProduct(request):
# 	if request.method == 'POST':
# 		stream = io.BytesIO(request.body)
# 		pythondata = JSONParser().parse(stream)
# 		serializer = ProductSerializer(data=pythondata)
# 		if serializer.is_valid():
# 			serializer.save()
# 			res = {'msg':'data saved'}
# 			return JsonResponse(res)
# 		return JsonResponse(serializer.errors)
	
	









