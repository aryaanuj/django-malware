from rest_framework.filters import SearchFilter, OrderingFilter
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from rest_framework.generics import CreateAPIView, RetrieveUpdateDestroyAPIView, ListAPIView
from api.customlimitoffset import customlimitoffset
from .serializers import UsersSerializer
from Core.models import User
from rest_framework.throttling import AnonRateThrottle


class IsSuperUser(IsAdminUser):
    def has_permission(self, request, view):
        return bool(request.user and request.user.is_superuser)

@method_decorator(csrf_exempt, name='dispatch')
class UserCreate(CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UsersSerializer
    throttle_classes = [AnonRateThrottle]


@method_decorator(csrf_exempt, name='dispatch')
class UserListApi(ListAPIView):
    queryset = User.objects.all()
    serializer_class = UsersSerializer
    permission_classes = [IsSuperUser]
    filter_backends = [SearchFilter, OrderingFilter,DjangoFilterBackend]
    search_fields = ['email', 'status']
    filterset_fields = ['id', 'email', 'status']
    ordering_fields = ['id','email']
    pagination_class = customlimitoffset

@method_decorator(csrf_exempt, name='dispatch')
class UserApi(RetrieveUpdateDestroyAPIView):
    queryset = User.objects.all()
    serializer_class = UsersSerializer
    permission_classes = [IsSuperUser]
